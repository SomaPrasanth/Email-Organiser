{"ast":null,"code":"var _jsxFileName = \"D:\\\\Project\\\\Email organiser\\\\client\\\\src\\\\pages\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport axios from 'axios';\nimport \"../styles/index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Dashboard() {\n  _s();\n  const query = new URLSearchParams(useLocation().search);\n  const token = query.get('token');\n  const [emails, setEmails] = useState([]);\n  const [filterText, setFilterText] = useState('');\n  const [selectedEmails, setSelectedEmails] = useState([]);\n  const [selectAll, setSelectAll] = useState(false);\n  useEffect(() => {\n    const fetchEmails = async () => {\n      if (token) {\n        try {\n          const res = await axios.post('http://localhost:5000/gmail/emails', {\n            token\n          }, {\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          });\n          setEmails(res.data.messages);\n          console.log(res.data.messages);\n        } catch (err) {\n          console.error('Failed to fetch emails:', err);\n        }\n      }\n    };\n    fetchEmails();\n  }, [token]);\n  const handleDeleteEmail = async messageId => {\n    try {\n      const res = await axios.post('http://localhost:5000/gmail/delete', {\n        token,\n        messageId\n      }, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      console.log(res.data.message);\n    } catch (err) {\n      console.error('Failed to delete email:', err);\n    }\n  };\n  const handleMarkAsRead = async messageId => {\n    try {\n      const res = await axios.post('http://localhost:5000/gmail/markAsRead', {\n        token,\n        messageId\n      }, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      console.log(res.data.message);\n      setEmails(emails.map(email => email.messageId === messageId ? {\n        ...email,\n        isRead: true\n      } : email));\n    } catch (err) {\n      console.error('Failed to mark as read:', err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '1rem'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Filter by sender\",\n        value: filterText,\n        onChange: e => setFilterText(e.target.value),\n        style: {\n          padding: '8px',\n          fontSize: '14px',\n          width: '250px',\n          borderRadius: '5px',\n          border: '1px solid #ccc'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '1rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: async () => {\n          const updatedEmails = emails.filter(email => !selectedEmails.includes(email.messageId));\n          for (const id of selectedEmails) {\n            await handleDeleteEmail(id); // Just delete on the server\n          }\n          setEmails(updatedEmails); // Update table only once with the new list\n          setSelectedEmails([]);\n        },\n        disabled: selectedEmails.length === 0,\n        style: {\n          marginRight: '10px'\n        },\n        children: \"Delete Selected\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: async () => {\n          await Promise.all(selectedEmails.map(id => handleMarkAsRead(id)));\n          setSelectedEmails([]);\n        },\n        disabled: selectedEmails.length === 0,\n        children: \"Mark Selected as Read\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Recent Emails:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"email-table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Select\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"From\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Subject\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Actions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: emails.filter(email => email.from.toLowerCase().includes(filterText.toLowerCase())).map((email, idx) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          style: {\n            backgroundColor: email.isRead ? '#f9f9f9' : '#fff'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: selectedEmails.includes(email.messageId),\n              onChange: () => {\n                setSelectedEmails(prev => prev.includes(email.messageId) ? prev.filter(id => id !== email.messageId) : [...prev, email.messageId]);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: email.from\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: email.subject\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: email.date\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleDeleteEmail(email.messageId),\n              className: \"delete\",\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 19\n            }, this), !email.isRead && /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleMarkAsRead(email.messageId),\n              className: \"markAsRead\",\n              children: \"Mark as Read\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 17\n          }, this)]\n        }, email.messageId, true, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n_s(Dashboard, \"Jm/3SbtdVWzvEvxvv+RNxlx3sCk=\", false, function () {\n  return [useLocation];\n});\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","useLocation","axios","jsxDEV","_jsxDEV","Dashboard","_s","query","URLSearchParams","search","token","get","emails","setEmails","filterText","setFilterText","selectedEmails","setSelectedEmails","selectAll","setSelectAll","fetchEmails","res","post","headers","data","messages","console","log","err","error","handleDeleteEmail","messageId","message","handleMarkAsRead","map","email","isRead","className","children","style","marginBottom","type","placeholder","value","onChange","e","target","padding","fontSize","width","borderRadius","border","fileName","_jsxFileName","lineNumber","columnNumber","onClick","updatedEmails","filter","includes","id","disabled","length","marginRight","Promise","all","from","toLowerCase","idx","backgroundColor","checked","prev","subject","date","_c","$RefreshReg$"],"sources":["D:/Project/Email organiser/client/src/pages/Dashboard.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport \"../styles/index.css\";\r\n\r\nfunction Dashboard() {\r\n  const query = new URLSearchParams(useLocation().search);\r\n  const token = query.get('token');\r\n  const [emails, setEmails] = useState([]);\r\n  const [filterText, setFilterText] = useState('');\r\n  const [selectedEmails, setSelectedEmails] = useState([]);\r\n  const [selectAll, setSelectAll] = useState(false);\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    const fetchEmails = async () => {\r\n      if (token) {\r\n        try {\r\n          const res = await axios.post('http://localhost:5000/gmail/emails',\r\n            { token },\r\n            { headers: { 'Content-Type': 'application/json' } }\r\n          );\r\n          setEmails(res.data.messages);\r\n          console.log(res.data.messages);\r\n        } catch (err) {\r\n          console.error('Failed to fetch emails:', err);\r\n        }\r\n      }\r\n    };\r\n\r\n    fetchEmails();\r\n  }, [token]);\r\n\r\n  const handleDeleteEmail = async (messageId) => {\r\n  try {\r\n    const res = await axios.post('http://localhost:5000/gmail/delete',\r\n      { token, messageId },\r\n      { headers: { 'Content-Type': 'application/json' } }\r\n    );\r\n    console.log(res.data.message);\r\n  } catch (err) {\r\n    console.error('Failed to delete email:', err);\r\n  }\r\n};\r\n\r\n\r\n  const handleMarkAsRead = async (messageId) => {\r\n    try {\r\n      const res = await axios.post('http://localhost:5000/gmail/markAsRead',\r\n        { token, messageId },\r\n        { headers: { 'Content-Type': 'application/json' } }\r\n      );\r\n      console.log(res.data.message);\r\n      setEmails(emails.map(email =>\r\n        email.messageId === messageId ? { ...email, isRead: true } : email\r\n      ));\r\n    } catch (err) {\r\n      console.error('Failed to mark as read:', err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div style={{ marginBottom: '1rem' }}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Filter by sender\"\r\n          value={filterText}\r\n          onChange={(e) => setFilterText(e.target.value)}\r\n          style={{\r\n            padding: '8px',\r\n            fontSize: '14px',\r\n            width: '250px',\r\n            borderRadius: '5px',\r\n            border: '1px solid #ccc',\r\n          }}\r\n        />\r\n      </div>\r\n      <div style={{ marginBottom: '1rem' }}>\r\n\r\n        <button\r\n          onClick={async () => {\r\n            const updatedEmails = emails.filter(email => !selectedEmails.includes(email.messageId));\r\n\r\n            for (const id of selectedEmails) {\r\n              await handleDeleteEmail(id);  // Just delete on the server\r\n            }\r\n\r\n            setEmails(updatedEmails); // Update table only once with the new list\r\n            setSelectedEmails([]);\r\n          }}\r\n          disabled={selectedEmails.length === 0}\r\n          style={{ marginRight: '10px' }}\r\n        >\r\n          Delete Selected\r\n        </button>\r\n\r\n        <button\r\n          onClick={async () => {\r\n            await Promise.all(selectedEmails.map((id) => handleMarkAsRead(id)));\r\n            setSelectedEmails([]);\r\n          }}\r\n          disabled={selectedEmails.length === 0}\r\n        >\r\n          Mark Selected as Read\r\n        </button>\r\n\r\n      </div>\r\n\r\n\r\n      <h2>Recent Emails:</h2>\r\n      <table className=\"email-table\">\r\n        <thead>\r\n          <tr>\r\n            <th>Select</th>\r\n            <th>From</th>\r\n            <th>Subject</th>\r\n            <th>Date</th>\r\n            <th>Actions</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {emails\r\n            .filter((email) =>\r\n              email.from.toLowerCase().includes(filterText.toLowerCase())\r\n            )\r\n            .map((email, idx) => (\r\n              <tr key={email.messageId} style={{ backgroundColor: email.isRead ? '#f9f9f9' : '#fff' }}>\r\n                <td>\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={selectedEmails.includes(email.messageId)}\r\n                    onChange={() => {\r\n                      setSelectedEmails((prev) =>\r\n                        prev.includes(email.messageId)\r\n                          ? prev.filter((id) => id !== email.messageId)\r\n                          : [...prev, email.messageId]\r\n                      );\r\n                    }}\r\n                  />\r\n                </td>\r\n                <td>{email.from}</td>\r\n                <td>{email.subject}</td>\r\n                <td>{email.date}</td>\r\n                <td>\r\n                  <button onClick={() => handleDeleteEmail(email.messageId)} className=\"delete\">Delete</button>\r\n                  {!email.isRead && (\r\n                    <button onClick={() => handleMarkAsRead(email.messageId)} className=\"markAsRead\">Mark as Read</button>\r\n                  )}\r\n                </td>\r\n              </tr>\r\n\r\n            ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default Dashboard;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}